{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","data","nowData","name","content","xpath","result","loading","hasMore","fetchData","callback","fetch","method","headers","then","res","json","console","log","unshift","selectXML","e","setState","insert","body","JSON","stringify","msg","message","success","componentDidMount","warning","update","_id","submit","remove","id","search","code","info","handleInput","target","value","handleInfiniteOnLoad","length","concat","results","this","className","initialLoad","pageStart","loadMore","useWindow","dataSource","renderItem","item","Item","key","onClick","bind","danger","type","size","style","float","placeholder","onChange","TextArea","rows","margin","width","Search","onSearch","enterButton","readOnly","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"uHAAAA,EAAOC,QAAU,IAA0B,kC,gNCkN5BC,G,0NAxMbC,MAAQ,CACNC,KAAM,GACNC,QAAQ,CACNC,KAAK,GACLC,QAAQ,IAEVC,MAAM,GACNC,OAAO,GACPC,SAAS,EACTC,SAAS,G,EAUXC,UAAY,SAAAC,GACVC,MAAM,uCAAuC,CAC3CC,OAAO,MACPC,QAAQ,CAAC,eAAe,sBACvBC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UAAQF,MAAK,SAAAC,GAC5BE,QAAQC,IAAIH,GACZA,EAAId,KAAKkB,QAAQ,CACfhB,KAAK,oBACLC,QAAQ,KAEVM,EAASK,EAAId,U,EAGjBmB,UAAU,SAACC,GACTJ,QAAQC,IAAIG,GACZ,EAAKC,SAAS,CAACpB,QAAQmB,K,EAEzBE,OAAO,WACLZ,MAAM,kCAAkC,CACtCC,OAAO,OACPC,QAAQ,CAAC,eAAe,oBACxBW,KAAKC,KAAKC,UAAU,EAAK1B,MAAME,WAC9BY,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UAAQF,MAAK,SAAAC,GAC5BE,QAAQC,IAAIH,GACA,MAATA,EAAIY,KACLC,IAAQC,QAAQ,gBAChB,EAAKC,qBAELF,IAAQG,QAAQhB,EAAIY,S,EAK1BK,OAAO,WACLrB,MAAM,mCAAmC,EAAKX,MAAME,QAAQ+B,IAAI,CAC9DrB,OAAO,MACPC,QAAQ,CAAC,eAAe,oBACxBW,KAAKC,KAAKC,UAAU,EAAK1B,MAAME,WAC9BY,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UAAQF,MAAK,SAAAC,GAC5BE,QAAQC,IAAIH,GACA,MAATA,EAAIY,KACLC,IAAQC,QAAQ,gBAChB,EAAKC,qBAELF,IAAQG,QAAQhB,EAAIY,S,EAK1BO,OAAO,WACF,EAAKlC,MAAME,QAAQ+B,IACpB,EAAKD,SAEL,EAAKT,U,EAGTY,OAAO,SAAAC,GACLzB,MAAM,mCAAmCyB,EAAG,CAC1CxB,OAAO,SACPC,QAAQ,CAAC,eAAe,sBACvBC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UAAQF,MAAK,SAAAC,GAC5BE,QAAQC,IAAIH,GACA,MAATA,EAAIY,KACLC,IAAQC,QAAQ,gBAChB,EAAKC,qBAELF,IAAQG,QAAQhB,EAAIY,S,EAK1BU,OAAO,SAAAhB,GACD,EAAKrB,MAAME,QAAQ+B,IAIvBtB,MAAM,sCAAsC,EAAKX,MAAME,QAAQ+B,IAAI,CACjErB,OAAO,OACPC,QAAQ,CAAC,eAAe,oBACxBW,KAAKC,KAAKC,UAAU,CAACrB,MAAMgB,MAC1BP,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UAAQF,MAAK,SAAAC,GAC5BE,QAAQC,IAAIH,GACC,KAAVA,EAAIuB,KACL,EAAKhB,SAAS,CAAChB,OAAOS,EAAId,OAE1B2B,IAAQG,QAAQhB,EAAIY,QAZtBC,IAAQW,KAAK,+C,EAiBjBC,YAAY,SAAAnB,GAEV,GAAkB,SAAfA,EAAEoB,OAAOtC,KAAZ,CAIA,IAAIF,EAAK,EAAKD,MAAME,QACpBD,EAAKoB,EAAEoB,OAAOtC,MAAMkB,EAAEoB,OAAOC,MAC7B,EAAKpB,SAAS,CAACpB,QAAQD,SALrB,EAAKqB,SAAS,CAACjB,MAAMgB,EAAEoB,OAAOC,S,EAOlCC,qBAAuB,WAAO,IACtB1C,EAAS,EAAKD,MAAdC,KAIN,GAHA,EAAKqB,SAAS,CACZf,SAAS,IAEPN,EAAK2C,OAAS,GAMhB,OALAhB,IAAQG,QAAQ,iCAChB,EAAKT,SAAS,CACZd,SAAS,EACTD,SAAS,IAIb,EAAKE,WAAU,SAAAM,GACbd,EAAOA,EAAK4C,OAAO9B,EAAI+B,SACvB,EAAKxB,SAAS,CACZrB,OACAM,SAAS,Q,kEA7HM,IAAD,OAClBwC,KAAKtC,WAAU,SAAAM,GACb,EAAKO,SAAS,CACZrB,KAAMc,EACNb,QAAQa,EAAI,U,+BA6HR,IAAD,OACP,OACE,yBAAKiC,UAAU,aACb,kBAAC,IAAD,CACEC,aAAa,EACbC,UAAW,EACXC,SAAUJ,KAAKJ,qBACfnC,SAAUuC,KAAK/C,MAAMO,SAAWwC,KAAK/C,MAAMQ,QAC3C4C,WAAW,GAEX,kBAAC,IAAD,CAAMJ,UAAU,OACdK,WAAYN,KAAK/C,MAAMC,KACvBqD,WAAY,SAAAC,GAAI,OACd,kBAAC,IAAKC,KAAN,CAAWC,IAAKF,EAAKtB,IAAKe,UAAU,OAAOU,QAAS,EAAKtC,UAAUuC,KAAK,EAAKJ,IAC3E,6BAAMA,EAAKpD,MAEToD,EAAKtB,IAAI,kBAAC,IAAD,CAAQ2B,QAAM,EAACF,QAAS,EAAKvB,OAAOwB,KAAK,EAAKJ,EAAKtB,KAC5D4B,KAAK,OAAOC,KAAK,QACjBC,MAAO,CAACC,MAAM,UAFL,gBAE4B,MAM1CjB,KAAK/C,MAAMO,SAAWwC,KAAK/C,MAAMQ,SAChC,yBAAKwC,UAAU,0BACb,kBAAC,IAAD,SAKR,yBAAKA,UAAU,WACX,kBAAC,IAAD,CACAN,MAAOK,KAAK/C,MAAME,QAAQC,KAC1B2D,KAAK,QAAQ3D,KAAK,OAClB8D,YAAY,0BACZC,SAAUnB,KAAKP,cAEf,kBAAC,IAAM2B,SAAP,CACAzB,MAAOK,KAAK/C,MAAME,QAAQE,QAC1BgE,KAAM,GAAIjE,KAAK,UACf+D,SAAUnB,KAAKP,YACfyB,YAAY,+BAEZ,kBAAC,IAAD,CAAQJ,KAAK,UAAUC,KAAK,QAC5BC,MAAO,CAACM,OAAO,WAAWC,MAAM,OAChCZ,QAASX,KAAKb,QAFd,gBAbJ,SAiBU,kBAAC,IAAMqC,OAAP,CACAC,SAAUzB,KAAKV,OACfyB,KAAK,QAAQG,YAAY,cACzBQ,YAAY,WApBtB,WAqBY,kBAAC,IAAMN,SAAP,CAAgBzB,MAAOK,KAAK/C,MAAMM,OAAQ8D,KAAM,EAAGM,UAAQ,U,GAjM7DC,IAAMC,YCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3E,MAAK,SAAA4E,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5E,QAAQ4E,MAAMA,EAAMjE,a","file":"static/js/main.8d4bab64.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport { List, message, Avatar, Spin, Input, Button } from 'antd';\n\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nclass App extends React.Component{\n  state = {\n    data: [],\n    nowData:{\n      name:\"\",\n      content:\"\"\n    },\n    xpath:\"\",\n    result:\"\",\n    loading: false,\n    hasMore: true,\n  };\n  componentDidMount() {\n    this.fetchData(res => {\n      this.setState({\n        data: res,\n        nowData:res[0]\n      });\n    });\n  }\n  fetchData = callback => {\n    fetch(\"http://localhost:3000/XMLoprate/15/1\",{\n      method:\"get\",\n      headers:{\"content-type\":\"application/json\"}\n    }).then(res=>res.json()).then(res=>{\n      console.log(res)\n      res.data.unshift({\n        name:\"add a new xml doc\",\n        content:\"\"\n      })\n      callback(res.data)\n    })\n  };\n  selectXML=(e)=>{\n    console.log(e)\n    this.setState({nowData:e})\n  }\n  insert=()=>{\n    fetch(\"http://localhost:3000/XMLoprate\",{\n      method:\"post\",\n      headers:{\"content-type\":\"application/json\"},\n      body:JSON.stringify(this.state.nowData)\n    }).then(res=>res.json()).then(res=>{\n      console.log(res)\n      if(res.msg==\"ok\"){\n        message.success(\"成功\")\n        this.componentDidMount()\n      }else{\n        message.warning(res.msg)\n      }\n      \n    })\n  }\n  update=()=>{\n    fetch(\"http://localhost:3000/XMLoprate/\"+this.state.nowData._id,{\n      method:\"put\",\n      headers:{\"content-type\":\"application/json\"},\n      body:JSON.stringify(this.state.nowData)\n    }).then(res=>res.json()).then(res=>{\n      console.log(res)\n      if(res.msg==\"ok\"){\n        message.success(\"成功\")\n        this.componentDidMount()\n      }else{\n        message.warning(res.msg)\n      }\n      \n    })\n  }\n  submit=()=>{\n    if(this.state.nowData._id){\n      this.update()\n    }else{\n      this.insert()\n    }\n  }\n  remove=id=>{\n    fetch(\"http://localhost:3000/XMLoprate/\"+id,{\n      method:\"delete\",\n      headers:{\"content-type\":\"application/json\"},\n    }).then(res=>res.json()).then(res=>{\n      console.log(res)\n      if(res.msg==\"ok\"){\n        message.success(\"成功\")\n        this.componentDidMount()\n      }else{\n        message.warning(res.msg)\n      }\n      \n    })\n  }\n  search=e=>{\n    if(!this.state.nowData._id){\n      message.info(\"先选择一个文档\")\n      return\n    }\n    fetch(\"http://localhost:3000/queryByXpath/\"+this.state.nowData._id,{\n      method:\"post\",\n      headers:{\"content-type\":\"application/json\"},\n      body:JSON.stringify({xpath:e})\n    }).then(res=>res.json()).then(res=>{\n      console.log(res)\n      if(res.code==200){\n        this.setState({result:res.data})\n      }else{\n        message.warning(res.msg)\n      }\n      \n    })\n  }\n  handleInput=e=>{\n    // console.log(e.target.value)\n    if(e.target.name==\"xpath\"){\n      this.setState({xpath:e.target.value})\n      return\n    }\n    let data=this.state.nowData\n    data[e.target.name]=e.target.value\n    this.setState({nowData:data})\n  }\n  handleInfiniteOnLoad = () => {\n    let { data } = this.state;\n    this.setState({\n      loading: true,\n    });\n    if (data.length > 14) {\n      message.warning('Infinite List loaded all');\n      this.setState({\n        hasMore: false,\n        loading: false,\n      });\n      return;\n    }\n    this.fetchData(res => {\n      data = data.concat(res.results);\n      this.setState({\n        data,\n        loading: false,\n      });\n    });\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <InfiniteScroll\n          initialLoad={false}\n          pageStart={0}\n          loadMore={this.handleInfiniteOnLoad}\n          hasMore={!this.state.loading && this.state.hasMore}\n          useWindow={false}\n        >\n          <List className=\"list\"\n            dataSource={this.state.data}\n            renderItem={item => (\n              <List.Item key={item._id} className=\"item\" onClick={this.selectXML.bind(this,item)}>\n                <div>{item.name}</div>\n                {\n                  item._id?<Button danger onClick={this.remove.bind(this,item._id)}\n                  type=\"link\" size=\"small\" \n                  style={{float:\"right\"}} >删除</Button>:\"\"\n                }\n                \n              </List.Item>\n            )}\n          >\n            {this.state.loading && this.state.hasMore && (\n              <div className=\"demo-loading-container\">\n                <Spin />\n              </div>\n            )}\n          </List>\n        </InfiniteScroll>\n        <div className=\"content\">\n            <Input \n            value={this.state.nowData.name} \n            size=\"large\" name=\"name\"\n            placeholder=\"input the document name\"\n            onChange={this.handleInput}\n             />\n            <Input.TextArea \n            value={this.state.nowData.content} \n            rows={10} name=\"content\"\n            onChange={this.handleInput}\n            placeholder=\"input the document content\"\n             />\n            <Button type=\"primary\" size=\"large\" \n            style={{margin:\"10px 41%\",width:\"14%\"}} \n            onClick={this.submit}\n            >提交</Button>\n            xpath:<Input.Search \n                  onSearch={this.search} \n                  size=\"large\" placeholder=\"input xpath\" \n                  enterButton=\"Select\" />\n            results:<Input.TextArea value={this.state.result} rows={7} readOnly />\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}